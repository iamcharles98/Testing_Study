# # 소프트웨어 테스팅_1

생성 일시: 2023년 1월 4일 오후 1:11

<aside>
🌱 소프트웨어 테스팅의 필요성

**소프트웨어 개발에서 테스팅의 중요성 → 소프트웨어를 개발하는 과정에서 드는 비용의 비중**

- 요구분석, 설계 → 40%
- 테스팅 → 40%
- 프로그래밍 → 20%

임베디드 소프트웨어 → 반드시 엄격한 신뢰성 및 안전성 검증 필요

사고 예시) Therac-25 방사능 치료기 소프트웨어 제어로 변경 뒤 잘못된 모드로 작동되어 강력한 방사능이 환자에게 노출된 사례

</aside>

---

## 소프트웨어 테스팅

Error Prevention

⇒ Code Inspection

static 분석 

⇒ 소프트웨어를 실행하지 않고 테스팅 하는 기법 

목적 : 소프트웨어 소스코드의 결함을 발견한는 것

---

Error Detection

⇒ Code Execution

dynamic 분석

⇒ 구현된 시스템을 동작시켜 테스팅하는 기법

BlackBox 기법

WhiteBox 기법

경험기반 테스트

---

- Test data ⇒ 시스템을 테스트하기 위해 만들어진 Inputs
- Test cases ⇒ 작성된 Spec에 맞는 Outputs과 그 아웃풋을 만들어내는 Inputs
- Test suite ⇒ test case의 집합체
- Test orcle ⇒ Spec 혹은 문서 등등의 테스트 정의 메카니즘

### 동적 테스팅 절차

![캡처](https://user-images.githubusercontent.com/77047099/210713091-f0f0dcbc-c02a-41ba-a5dc-77152aafa8a2.png)

Test cases를 이용하여 responses를 만들어 낸 후 비교하여 분석하는 방식

### 테스팅 수명주기 (V-Model)

<img style="display: block;-webkit-user-select: none;margin: auto;cursor: zoom-in;background-color: hsl(0, 0%, 90%);transition: background-color 300ms;" src="https://user-images.githubusercontent.com/77047099/210713091-f0f0dcbc-c02a-41ba-a5dc-77152aafa8a2.png" width="513" height="370">

요구분석 ↔ 인수테스트 : 사용자의 요구사항(인터페이스, 성능, 보안 등)을 기록. 시스템 설계 단계에서 설계자에 대한 지침으로 사용된다. 사용자 테스트에 대한 설계는 이 요구사항 분석 단계에서 이루어진다.

 시스템 설계 ↔ 시스템테스트 : 전체 시스템 또는 제품의 동작에 대한 테스트. 시스템에 대한 문서는 시스템 설계 단계에서 작성된 문서이다.

아키텍쳐 설계 ↔ 통합테스트 : 아키텍처를 설계하면 일반적으로 구현될 모듈간의 인터페이스, 관계, 의존성 등을 기술한다. 기술된 설계도를 바탕으로 각 모듈들의 통합 테스트를 진행한다.

모듈 설계 ↔ 단위 테스트 : 각 모듈들의 코드를 테스트 한다.

<aside>
🌱 Verification
⇒ Are we building the product right?

</aside>

<aside>
🌱 Validation
⇒ Are we building the right  product?

</aside>

---

테스팅의 목적

- 고객과 개발자에게 개발되는 소프트웨어가 요구사항을 잘 만족하고 있음을 확인하는 것
- 소프트웨어가 부적절하게 작동하는 상황을 발견하기 위함

### Inspection

정적인 분석방법(소프트웨어를 실행시킬 필요가 없는 방법)

장점

- 테스팅 중에 오류들 간의 상호작용으로 인해 한 오류가 다른 오류를 가릴 수 있는데, 인스펙션은 시스템을 실행하지 않으므로 상호작용을 염려할 필요가 없다.
- 추가 비용 없이 시스템의 불완전한 버전이 검사될 수 있다.
- 프로그램의 결함을 찾는 것 뿐만 아니라 인스펙션은 표준의 준수, 이식성, 유지보수성과 같은 프로그램의 폭넓은 품질 속성을 검토할 수 있다.

<aside>
🌱 Inspection CheckList Example

1. Data Faults
→ 버퍼 오버플로우 발생 가능성?
→ 모든 변수 사용하기 전 초기화 되었는지? …
2. Control Faults
→ 각 loop가 종료 조건이 확실한 지
3. I/O Faults
→ 모든 Input values가 사용되고 있는지 ?
4. Storage Management Faults
→ 동적할당된 공간이 잘 Free되는지 ? … 등
</aside>

### Testing Process

![Untitled](#%20%E1%84%89%E1%85%A9%E1%84%91%E1%85%B3%E1%84%90%E1%85%B3%E1%84%8B%E1%85%B0%E1%84%8B%E1%85%A5%20%E1%84%90%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B5%E1%86%BC_1%20964e04dd76b2483283e73c67ef31e93d/Untitled%202.png)

테스트 케이스 설계 → 테스트 데이터 준비 → 테스트 데이터로 프로그램 동작 → 테스트 결과 → 테스트 케이스와의 결과 비교

<aside>
🌱 **Unit Test**

▶️ Testing Individual components
▶️ Unit ? → Individual Functions or methods within an object, Object classes with several attributes and methods 
Automated Unit Test → JUnit

</aside>

### Test-Driven Development

⇒ Tests are written before code and ‘passing’ the tests is the critical driver of development

코드를 작성하기 전 테스트 코드를 먼저 작성하고, 개발된 코드를 테스트하여 테스트를 통과하면 다음 증분 작업을 시작한다.

![Untitled](#%20%E1%84%89%E1%85%A9%E1%84%91%E1%85%B3%E1%84%90%E1%85%B3%E1%84%8B%E1%85%B0%E1%84%8B%E1%85%A5%20%E1%84%90%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B5%E1%86%BC_1%20964e04dd76b2483283e73c67ef31e93d/Untitled%203.png)

- 어떤 기능이 필요한지 확인하는 것부터 시작
- 기능에 대한 테스트 코드를 작성하고 자동화한다.
- 처음에는 기능에 대한 코드를 작성하지 않았으므로 테스트 코드에서 실패하고, 기능에 대한 코드를 작성하여 다시 테스트 코드를 동작시킨다.

**TDD의 장점**

- Code coverage → 모든 코드 조각들은 하나의 테스트와 관련있게 된다.
- Regression testing → 코드에 대한 변화가 이전의 작업을 망가뜨리지 않았는지 확인할 수 있다.
- Simplified Debugging → test에 실패 시 , 문제를 찾기 위하여 디버깅 도구를 사용할 필요가 없다. 실패 지점이 명백하다.
- System Documentation → 테스트 자체가 코드가 하는 일에 대한 설명이 된다.
